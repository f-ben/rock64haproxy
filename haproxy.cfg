global
    tune.ssl.default-dh-param 2048
    ssl-server-verify none
    ssl-default-bind-options no-sslv3 no-tls-tickets
    ssl-default-bind-ciphers EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH
    stats timeout 2m

defaults
    http-reuse safe
    option dontlognull
    option forwardfor
    option http-server-close
    retries 3
    timeout connect 10s
    timeout client 10m
    timeout client-fin 10m
    timeout queue 10s
    timeout server 300s
    timeout http-request 20s
    maxconn 24
    default-server inter 10s fastinter 2s downinter 30s
    stats hide-version

frontend iri_front
    mode http
    capture request header User-Agent len 128
    option forwardfor
    option log-separate-errors
    option http-buffer-request
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubdomains; preload;"
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    acl whitelist src 127.0.0.1 192.168.100.182

    # id=0 to store body for logging
    declare capture request len 40000
    http-request capture req.body id 0

    # diable client with no TCP body/request lenght
    tcp-request inspect-delay 30s
    acl content_present req_len gt 0
    tcp-request content accept if content_present

    # Enable tracking of counters for ip in the default stick-table
    tcp-request content track-sc0 src
    stick-table type ip size 1m expire 5m store gpc0,http_req_rate(5s),http_req_cnt,conn_cnt,sess_cnt
    acl source_is_abuser src_get_gpc0(iri_front) gt 0
    tcp-request connection reject if source_is_abuser
    tcp-request connection track-sc1 src if !source_is_abuser

    # drop connections from user with more then 1000 requests in 5m
    acl source_is_hacker src_http_req_cnt(iri_front) gt 1000
    tcp-request content reject if source_is_hacker !whitelist

    # limit OPTIONS method because this is only used on browsers
    acl options_method method OPTIONS

    # check IRI/IOTA header if present all is fine else redirect or kick
    acl api_header req.hdr(X-IOTA-API-Version) -m found
    http-request deny if !api_header !options_method

    # Check denied commands
    acl command_exists req.body -m sub -i command
    acl invalid_command req.body -m reg "${REMOTE_LIMIT_API}"
    acl bad_command req.body -m reg \"getTransactionsToApprove\"(.*)GFCCGTGSUEVBZYFK9QNAHOVHXUMEATUFLGBZLDKMOGWCXVUZDVEJVCLLCJJ9NQOIMOLMUMFMGZSI99999
    http-request deny if bad_command
    http-request deny if !command_exists !options_method
    http-request deny if invalid_command !whitelist

    # Enable these two lines for SSL to IRI
    reqadd X-Forwarded-Proto:\ https
    bind 0.0.0.0:443 ssl crt /haproxy.pem
    use_backend iri_back

backend iri_back
    mode http
    fullconn 12
    option redispatch
    timeout server 5m
    timeout server-fin 5m
    filter compression
    acl whitelist src 127.0.0.1 192.168.100.182
    stick-table type ip size 200k expire 30s store conn_rate(3s),http_req_rate(10s),conn_cur,sess_rate(3s)

    # dynamic stuff for frontend + raise gpc0 counter
    tcp-request content  track-sc2 src
    acl conn_rate_abuse  sc2_conn_rate gt 250
    acl http_rate_abuse  sc2_http_req_rate gt 400
    acl conn_cur_abuse  sc2_conn_cur gt 20

    # abuser marking
    acl mark_as_abuser   sc1_inc_gpc0 gt 0
    tcp-request content  reject if conn_rate_abuse mark_as_abuser !whitelist
    tcp-request content  reject if http_rate_abuse mark_as_abuser !whitelist
    tcp-request content  reject if conn_cur_abuse mark_as_abuser !whitelist

    balance source
    compression algo gzip
    compression type application/json text/html text/plain text/xml text/json text/css text/javascript application/javascript
    option log-health-checks
    option httpchk POST /
    http-check expect status 400
    default-server inter 10s fall 4 rise 2
    server iri 192.168.100.182:14265 maxconn 12 check
